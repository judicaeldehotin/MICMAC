// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "UseTestCste.h"


UseTestCste::UseTestCste():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("C2",3,4));
   AddIntRef (cIncIntervale("D2",4,5));
   AddIntRef (cIncIntervale("Omega2",0,3));
   AddIntRef (cIncIntervale("Tmp_PTer",5,8));
   Close(false);
}



void UseTestCste::ComputeVal()
{

  mVal[0] = mLocI2_x-(mCompCoord[5]-mLocVecB2_x)/(mCompCoord[7]-mLocVecB2_z);

}


void UseTestCste::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[5];
   double tmp1_ = tmp0_-mLocVecB2_x;
   double tmp2_ = mCompCoord[7];
   double tmp3_ = tmp2_-mLocVecB2_z;
   double tmp4_ = ElSquare(tmp3_);
   double tmp5_ = mCompCoord[6];

  mVal[0] = mLocI2_x-(tmp1_)/(tmp3_);

  mCompDer[0][0] = -(-((tmp1_)*tmp5_)/tmp4_);
  mCompDer[0][1] = -((tmp2_*(tmp3_)-(tmp1_)*-(tmp0_))/tmp4_);
  mCompDer[0][2] = -((-(tmp5_)*(tmp3_))/tmp4_);
  mCompDer[0][3] = -((-(mLocVecC2_x)*(tmp3_)-(tmp1_)*-(mLocVecC2_z))/tmp4_);
  mCompDer[0][4] = -((-(mLocVecD2_x)*(tmp3_)-(tmp1_)*-(mLocVecD2_z))/tmp4_);
  mCompDer[0][5] = -((tmp3_)/tmp4_);
  mCompDer[0][6] = 0;
  mCompDer[0][7] = -(-(tmp1_)/tmp4_);
}


void UseTestCste::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur UseTestCste Has no Der Sec");
}

void UseTestCste::SetI2_x(double aVal){ mLocI2_x = aVal;}
void UseTestCste::SetVecB2_x(double aVal){ mLocVecB2_x = aVal;}
void UseTestCste::SetVecB2_z(double aVal){ mLocVecB2_z = aVal;}
void UseTestCste::SetVecC2_x(double aVal){ mLocVecC2_x = aVal;}
void UseTestCste::SetVecC2_z(double aVal){ mLocVecC2_z = aVal;}
void UseTestCste::SetVecD2_x(double aVal){ mLocVecD2_x = aVal;}
void UseTestCste::SetVecD2_z(double aVal){ mLocVecD2_z = aVal;}



double * UseTestCste::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "I2_x") return & mLocI2_x;
   if (aName == "VecB2_x") return & mLocVecB2_x;
   if (aName == "VecB2_z") return & mLocVecB2_z;
   if (aName == "VecC2_x") return & mLocVecC2_x;
   if (aName == "VecC2_z") return & mLocVecC2_z;
   if (aName == "VecD2_x") return & mLocVecD2_x;
   if (aName == "VecD2_z") return & mLocVecD2_z;
   return 0;
}


cElCompiledFonc::cAutoAddEntry UseTestCste::mTheAuto("UseTestCste",UseTestCste::Alloc);


cElCompiledFonc *  UseTestCste::Alloc()
{  return new UseTestCste();
}


