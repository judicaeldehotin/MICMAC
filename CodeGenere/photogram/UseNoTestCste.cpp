// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "UseNoTestCste.h"


UseNoTestCste::UseNoTestCste():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("C2",3,4));
   AddIntRef (cIncIntervale("D2",4,5));
   AddIntRef (cIncIntervale("Omega2",0,3));
   AddIntRef (cIncIntervale("Tmp_PTer",5,8));
   Close(false);
}



void UseNoTestCste::ComputeVal()
{
   double tmp0_ = mCompCoord[7];
   double tmp1_ = mCompCoord[6];
   double tmp2_ = mCompCoord[1];
   double tmp3_ = mCompCoord[5];
   double tmp4_ = mCompCoord[3];
   double tmp5_ = mCompCoord[4];

  mVal[0] = mLocI2_x-((tmp3_+tmp2_*tmp0_-mCompCoord[2]*tmp1_)-mLocVecB2_x-mLocVecC2_x*tmp4_-mLocVecD2_x*tmp5_)/((tmp0_+mCompCoord[0]*tmp1_-tmp2_*tmp3_)-mLocVecB2_z-mLocVecC2_z*tmp4_-mLocVecD2_z*tmp5_);

}


void UseNoTestCste::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[7];
   double tmp1_ = mCompCoord[6];
   double tmp2_ = mCompCoord[1];
   double tmp3_ = mCompCoord[5];
   double tmp4_ = mCompCoord[3];
   double tmp5_ = mCompCoord[4];
   double tmp6_ = tmp2_*tmp0_;
   double tmp7_ = mCompCoord[2];
   double tmp8_ = tmp7_*tmp1_;
   double tmp9_ = tmp6_-tmp8_;
   double tmp10_ = tmp3_+tmp9_;
   double tmp11_ = (tmp10_)-mLocVecB2_x;
   double tmp12_ = mLocVecC2_x*tmp4_;
   double tmp13_ = tmp11_-tmp12_;
   double tmp14_ = mLocVecD2_x*tmp5_;
   double tmp15_ = tmp13_-tmp14_;
   double tmp16_ = mCompCoord[0];
   double tmp17_ = tmp16_*tmp1_;
   double tmp18_ = tmp2_*tmp3_;
   double tmp19_ = tmp17_-tmp18_;
   double tmp20_ = tmp0_+tmp19_;
   double tmp21_ = (tmp20_)-mLocVecB2_z;
   double tmp22_ = mLocVecC2_z*tmp4_;
   double tmp23_ = tmp21_-tmp22_;
   double tmp24_ = mLocVecD2_z*tmp5_;
   double tmp25_ = tmp23_-tmp24_;
   double tmp26_ = ElSquare(tmp25_);

  mVal[0] = mLocI2_x-(tmp15_)/(tmp25_);

  mCompDer[0][0] = -(-((tmp15_)*tmp1_)/tmp26_);
  mCompDer[0][1] = -((tmp0_*(tmp25_)-(tmp15_)*-(tmp3_))/tmp26_);
  mCompDer[0][2] = -((-(tmp1_)*(tmp25_))/tmp26_);
  mCompDer[0][3] = -((-(mLocVecC2_x)*(tmp25_)-(tmp15_)*-(mLocVecC2_z))/tmp26_);
  mCompDer[0][4] = -((-(mLocVecD2_x)*(tmp25_)-(tmp15_)*-(mLocVecD2_z))/tmp26_);
  mCompDer[0][5] = -((tmp25_-(tmp15_)*-(tmp2_))/tmp26_);
  mCompDer[0][6] = -((-(tmp7_)*(tmp25_)-(tmp15_)*tmp16_)/tmp26_);
  mCompDer[0][7] = -((tmp2_*(tmp25_)-(tmp15_))/tmp26_);
}


void UseNoTestCste::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur UseNoTestCste Has no Der Sec");
}

void UseNoTestCste::SetI2_x(double aVal){ mLocI2_x = aVal;}
void UseNoTestCste::SetVecB2_x(double aVal){ mLocVecB2_x = aVal;}
void UseNoTestCste::SetVecB2_z(double aVal){ mLocVecB2_z = aVal;}
void UseNoTestCste::SetVecC2_x(double aVal){ mLocVecC2_x = aVal;}
void UseNoTestCste::SetVecC2_z(double aVal){ mLocVecC2_z = aVal;}
void UseNoTestCste::SetVecD2_x(double aVal){ mLocVecD2_x = aVal;}
void UseNoTestCste::SetVecD2_z(double aVal){ mLocVecD2_z = aVal;}



double * UseNoTestCste::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "I2_x") return & mLocI2_x;
   if (aName == "VecB2_x") return & mLocVecB2_x;
   if (aName == "VecB2_z") return & mLocVecB2_z;
   if (aName == "VecC2_x") return & mLocVecC2_x;
   if (aName == "VecC2_z") return & mLocVecC2_z;
   if (aName == "VecD2_x") return & mLocVecD2_x;
   if (aName == "VecD2_z") return & mLocVecD2_z;
   return 0;
}


cElCompiledFonc::cAutoAddEntry UseNoTestCste::mTheAuto("UseNoTestCste",UseNoTestCste::Alloc);


cElCompiledFonc *  UseNoTestCste::Alloc()
{  return new UseNoTestCste();
}


