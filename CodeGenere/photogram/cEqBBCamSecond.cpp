// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cEqBBCamSecond.h"


cEqBBCamSecond::cEqBBCamSecond():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("C2",0,1));
   AddIntRef (cIncIntervale("D2",1,2));
   AddIntRef (cIncIntervale("Tmp_PTer",2,5));
   Close(false);
}



void cEqBBCamSecond::ComputeVal()
{
   double tmp0_ = mCompCoord[0];
   double tmp1_ = mCompCoord[1];
   double tmp2_ = mCompCoord[4];
   double tmp3_ = tmp2_+mLocVecB2_z;
   double tmp4_ = mLocVecC2_z*tmp0_;
   double tmp5_ = tmp3_+tmp4_;
   double tmp6_ = mLocVecD2_z*tmp1_;
   double tmp7_ = tmp5_+tmp6_;

  mVal[0] = mLocI2_x-(mCompCoord[2]+mLocVecB2_x+mLocVecC2_x*tmp0_+mLocVecD2_x*tmp1_)/(tmp7_);

  mVal[1] = mLocI2_y-(mCompCoord[3]+mLocVecB2_y+mLocVecC2_y*tmp0_+mLocVecD2_y*tmp1_)/(tmp7_);

}


void cEqBBCamSecond::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[0];
   double tmp1_ = mCompCoord[1];
   double tmp2_ = mCompCoord[4];
   double tmp3_ = tmp2_+mLocVecB2_z;
   double tmp4_ = mLocVecC2_z*tmp0_;
   double tmp5_ = tmp3_+tmp4_;
   double tmp6_ = mLocVecD2_z*tmp1_;
   double tmp7_ = tmp5_+tmp6_;
   double tmp8_ = mCompCoord[2];
   double tmp9_ = tmp8_+mLocVecB2_x;
   double tmp10_ = mLocVecC2_x*tmp0_;
   double tmp11_ = tmp9_+tmp10_;
   double tmp12_ = mLocVecD2_x*tmp1_;
   double tmp13_ = tmp11_+tmp12_;
   double tmp14_ = ElSquare(tmp7_);
   double tmp15_ = mCompCoord[3];
   double tmp16_ = tmp15_+mLocVecB2_y;
   double tmp17_ = mLocVecC2_y*tmp0_;
   double tmp18_ = tmp16_+tmp17_;
   double tmp19_ = mLocVecD2_y*tmp1_;
   double tmp20_ = tmp18_+tmp19_;
   double tmp21_ = (tmp7_)/tmp14_;
   double tmp22_ = -(tmp21_);

  mVal[0] = mLocI2_x-(tmp13_)/(tmp7_);

  mCompDer[0][0] = -((mLocVecC2_x*(tmp7_)-(tmp13_)*mLocVecC2_z)/tmp14_);
  mCompDer[0][1] = -((mLocVecD2_x*(tmp7_)-(tmp13_)*mLocVecD2_z)/tmp14_);
  mCompDer[0][2] = tmp22_;
  mCompDer[0][3] = 0;
  mCompDer[0][4] = -(-(tmp13_)/tmp14_);
  mVal[1] = mLocI2_y-(tmp20_)/(tmp7_);

  mCompDer[1][0] = -((mLocVecC2_y*(tmp7_)-(tmp20_)*mLocVecC2_z)/tmp14_);
  mCompDer[1][1] = -((mLocVecD2_y*(tmp7_)-(tmp20_)*mLocVecD2_z)/tmp14_);
  mCompDer[1][2] = 0;
  mCompDer[1][3] = tmp22_;
  mCompDer[1][4] = -(-(tmp20_)/tmp14_);
}


void cEqBBCamSecond::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqBBCamSecond Has no Der Sec");
}

void cEqBBCamSecond::SetI2_x(double aVal){ mLocI2_x = aVal;}
void cEqBBCamSecond::SetI2_y(double aVal){ mLocI2_y = aVal;}
void cEqBBCamSecond::SetVecB2_x(double aVal){ mLocVecB2_x = aVal;}
void cEqBBCamSecond::SetVecB2_y(double aVal){ mLocVecB2_y = aVal;}
void cEqBBCamSecond::SetVecB2_z(double aVal){ mLocVecB2_z = aVal;}
void cEqBBCamSecond::SetVecC2_x(double aVal){ mLocVecC2_x = aVal;}
void cEqBBCamSecond::SetVecC2_y(double aVal){ mLocVecC2_y = aVal;}
void cEqBBCamSecond::SetVecC2_z(double aVal){ mLocVecC2_z = aVal;}
void cEqBBCamSecond::SetVecD2_x(double aVal){ mLocVecD2_x = aVal;}
void cEqBBCamSecond::SetVecD2_y(double aVal){ mLocVecD2_y = aVal;}
void cEqBBCamSecond::SetVecD2_z(double aVal){ mLocVecD2_z = aVal;}



double * cEqBBCamSecond::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "I2_x") return & mLocI2_x;
   if (aName == "I2_y") return & mLocI2_y;
   if (aName == "VecB2_x") return & mLocVecB2_x;
   if (aName == "VecB2_y") return & mLocVecB2_y;
   if (aName == "VecB2_z") return & mLocVecB2_z;
   if (aName == "VecC2_x") return & mLocVecC2_x;
   if (aName == "VecC2_y") return & mLocVecC2_y;
   if (aName == "VecC2_z") return & mLocVecC2_z;
   if (aName == "VecD2_x") return & mLocVecD2_x;
   if (aName == "VecD2_y") return & mLocVecD2_y;
   if (aName == "VecD2_z") return & mLocVecD2_z;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqBBCamSecond::mTheAuto("cEqBBCamSecond",cEqBBCamSecond::Alloc);


cElCompiledFonc *  cEqBBCamSecond::Alloc()
{  return new cEqBBCamSecond();
}


