include(${CMAKE_CURRENT_SOURCE_DIR}/precompiled_headers.cmake)
cmake_minimum_required( VERSION 2.8.1 )
project(MICMAC)

set(VERBOSE 0)

set (MICMAC_VERSION_MAJOR 1)
set (MICMAC_VERSION_MINOR 0)

# Use Kakadu
OPTION(WITH_KAKADU  "Include KAKADU Support" OFF)
# Use Matis orientation
OPTION(WITH_MATIS_ORI "Include Matis orrientation" OFF )
# Use Subversion
OPTION(WITH_SVN "Use SVN" OFF )

IF(${WITH_SVN})
	FIND_PACKAGE(Subversion)
	  IF(SUBVERSION_FOUND)
	    Subversion_WC_INFO(${PROJECT_SOURCE_DIR} MICMAC)
	    MESSAGE("Current revision is ${MICMAC_WC_REVISION}")
	    Subversion_WC_LOG(${PROJECT_SOURCE_DIR} MICMAC)
	    MESSAGE("Last changed log is ${MICMAC_LAST_CHANGED_LOG}")
	  ELSE()
		MESSAGE("Impossible de trouver la version SVN")
		set(MICMAC_WC_REVISION 0)
	ENDIF()

	IF(NOT ${PROJECT_NAME}_CONFIG_HAS_BEEN_RUN_BEFORE)
		UNSET(CMAKE_INSTALL_PREFIX CACHE)
		SET(CMAKE_INSTALL_PREFIX ${${PROJECT_NAME}_SOURCE_DIR} CACHE PATH "")
	ENDIF()
ENDIF()

CONFIGURE_FILE (
  "include/general/MM_InstalDir.h.in"
  "${PROJECT_BINARY_DIR}/include/general/MM_InstalDir.h"
  )

INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/include)

IF(${WITH_KAKADU})
	FIND_PACKAGE( KAKADU )
	IF(NOT KAKADU_FOUND)
		MESSAGE("Warning! Kakadu not found. Micmac will be built without JPEG2000 support.")
	ELSE()
		ADD_DEFINITIONS(-D__USE_JP2__)
		LINK_DIRECTORIES( ${KAKADU_LIBRARY_DIRS})
		INCLUDE_DIRECTORIES( ${KAKADU_INCLUDE_DIRS})
		MESSAGE("KAKADU : ${KAKADU_LIBRARIES}")
	ENDIF()

ENDIF()

IF(${WITH_MATIS_ORI})
	FIND_PACKAGE( MatisOrientation )
	IF(NOT MatisOrientation_FOUND)
		MESSAGE("Warning! MatisOrientation not found. Micmac will be built without MatisOrientation support.")
	ELSE()
		OPTION(MICMAC_USE_PROJ4 "Use PROJ4" OFF)
		#-- recherche de boost
		SET(Boost_USE_MULTITHREADED ON)
		FIND_PACKAGE( Boost 1.46.0 COMPONENTS unit_test_framework system filesystem serialization thread  REQUIRED )
		FIND_PACKAGE(TICPP REQUIRED)
		IF ( TICPP_FOUND)
			LINK_DIRECTORIES(${TICPP_LIBRARY_DIRS})
			INCLUDE_DIRECTORIES(${TICPP_INCLUDE_DIRS})
		ENDIF()
	
		IF (MICMAC_USE_PROJ4)
			FIND_PACKAGE( PROJ4 REQUIRED )
			LINK_DIRECTORIES(${PROJ4_LIBRARY_DIRS})
			INCLUDE_DIRECTORIES(${PROJ4_INCLUDE_DIRS})
		ENDIF()
	
		ADD_DEFINITIONS(-D__USE_ORIENTATIONMATIS__ )
		LINK_DIRECTORIES(${MatisOrientation_LIBRARY_DIRS})
		INCLUDE_DIRECTORIES(${MatisOrientation_INCLUDE_DIRS})

	ENDIF()
ENDIF()


FIND_PACKAGE(X11)
IF (X11_FOUND)
	MESSAGE("X11 Found : ${X11_INCLUDE_DIRS} | ${X11_LIBRARIES} | ${X11_LIBRARY_DIRS}")
ELSE()
	MESSAGE("X11 Not Found : pas de SaisieMasq")
ENDIF()

IF (MSVC)
	add_definitions( "/W3 /D_CRT_SECURE_NO_WARNINGS /wd4005 /wd4996 /nologo" )
ENDIF()

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
 

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/bin)

	
IF (CMAKE_COMPILER_IS_GNUCC)
	ADD_DEFINITIONS(-O2)
ENDIF()

set(ELISE_DIR src)
set(APPLIS_DIR applis)

ADD_SUBDIRECTORY(${ELISE_DIR}) 
ADD_SUBDIRECTORY(${APPLIS_DIR}) 

